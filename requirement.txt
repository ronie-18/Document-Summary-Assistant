# requirements.txt
Flask==2.3.3
PyPDF2==3.0.1
pytesseract==0.3.10
Pillow==10.0.1
nltk==3.8.1
Werkzeug==2.3.7
gunicorn==21.2.0

# For deployment
python-dotenv==1.0.0

---

# README.md
# Document Summary Assistant

A Python Flask web application that extracts text from PDF files and images, then generates intelligent summaries using natural language processing.

## Features

- **Document Upload**: Support for PDF files and images (PNG, JPG, JPEG)
- **Text Extraction**:
  - PDF parsing using PyPDF2
  - OCR for images using Tesseract
- **Smart Summarization**:
  - Advanced sentence scoring algorithm
  - Multiple summary lengths (Short, Medium, Long)
  - Key points extraction
  - Summary statistics
- **Modern UI**: Responsive design with drag-and-drop interface
- **Error Handling**: Comprehensive error handling and user feedback

## Installation

### Prerequisites
- Python 3.8 or higher
- Tesseract OCR engine

#### Installing Tesseract

**Ubuntu/Debian:**
```bash
sudo apt update
sudo apt install tesseract-ocr
```

**macOS:**
```bash
brew install tesseract
```

**Windows:**
Download and install from: https://github.com/UB-Mannheim/tesseract/wiki

### Setup

1. Clone or download the project files
2. Create a virtual environment:
```bash
python -m venv document_summary_env
source document_summary_env/bin/activate  # On Windows: document_summary_env\Scripts\activate
```

3. Install dependencies:
```bash
pip install -r requirements.txt
```

4. Create necessary directories:
```bash
mkdir templates uploads
```

5. Move the HTML template to the templates folder:
```bash
# Copy the index.html content to templates/index.html
```

## Usage

1. Start the application:
```bash
python app.py
```

2. Open your browser and go to `http://localhost:5000`

3. Upload a PDF or image file by dragging and dropping or clicking to browse

4. Choose your preferred summary length (Short, Medium, or Long)

5. Click "Generate Summary" to process the document

6. View the generated summary, key points, and statistics

## How It Works

### Text Extraction
- **PDF Files**: Uses PyPDF2 to extract text while preserving formatting
- **Image Files**: Uses Tesseract OCR to recognize and extract text from images

### Summarization Algorithm
The app uses a sophisticated scoring system that considers:
- **Word frequency**: Important words get higher scores
- **Sentence position**: First and last sentences often contain key information
- **Keywords**: Sentences with important keywords are prioritized
- **Length**: Medium-length sentences are preferred for readability
- **Proper nouns**: Sentences with names and places are given more weight
- **Numbers and dates**: Factual information is prioritized

### Key Points Extraction
1. Looks for numbered or bulleted lists in the original text
2. Identifies sentences with high keyword density
3. Extracts the most informative sentences as fallback

## Deployment

### Using Gunicorn (Production)
```bash
gunicorn -w 4 -b 0.0.0.0:5000 app:app
```

### Environment Variables
Create a `.env` file for production:
```
FLASK_ENV=production
SECRET_KEY=your-secret-key-here
```

### Hosting Platforms
- **Heroku**: Add `Procfile` with: `web: gunicorn app:app`
- **Railway**: Works out of the box with requirements.txt
- **DigitalOcean App Platform**: Configure using requirements.txt
- **AWS Elastic Beanstalk**: Deploy using zip file

## Project Structure
```
document-summary-assistant/
├── app.py                 # Main Flask application
├── requirements.txt       # Python dependencies
├── templates/
│   └── index.html        # Main HTML template
├── uploads/              # Temporary file storage
└── README.md            # This file
```

## Technical Approach

This application demonstrates several key software engineering principles:

1. **Separation of Concerns**: Clear separation between file handling, text processing, and summarization
2. **Error Handling**: Comprehensive error handling at every level
3. **User Experience**: Real-time feedback and loading states
4. **Scalability**: Modular design allows for easy addition of new features
5. **Security**: File validation and secure filename handling

## Limitations & Future Improvements

- Currently processes one document at a time
- Limited to 10MB file size
- Could benefit from more advanced NLP models (transformer-based)
- No user authentication or document storage

---

# Procfile (for Heroku deployment)
web: gunicorn app:app

---

# .env (environment variables template)
FLASK_ENV=development
SECRET_KEY=your-secret-key-here
UPLOAD_FOLDER=uploads
MAX_CONTENT_LENGTH=10485760

---

# .gitignore
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
uploads/
*.log
.DS_Store